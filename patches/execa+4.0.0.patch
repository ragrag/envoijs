diff --git a/node_modules/execa/lib/kill.js b/node_modules/execa/lib/kill.js
index a684e2c..3e1b830 100644
--- a/node_modules/execa/lib/kill.js
+++ b/node_modules/execa/lib/kill.js
@@ -1,7 +1,7 @@
 'use strict';
 const os = require('os');
 const onExit = require('signal-exit');
-
+const kill = require('tree-kill');
 const DEFAULT_FORCE_KILL_TIMEOUT = 1000 * 5;
 
 // Monkey-patches `childProcess.kill()` to add `forceKillAfterTimeout` behavior
@@ -11,6 +11,8 @@ const spawnedKill = (kill, signal = 'SIGTERM', options = {}) => {
 	return killResult;
 };
 
+
+
 const setKillTimeout = (kill, signal, options, killResult) => {
 	if (!shouldForceKill(signal, options, killResult)) {
 		return;
@@ -53,7 +55,7 @@ const getForceKillAfterTimeout = ({forceKillAfterTimeout = true}) => {
 
 // `childProcess.cancel()`
 const spawnedCancel = (spawned, context) => {
-	const killResult = spawned.kill();
+	const killResult = 	kill(spawned.pid, 'SIGKILL');
 
 	if (killResult) {
 		context.isCanceled = true;
@@ -61,7 +63,8 @@ const spawnedCancel = (spawned, context) => {
 };
 
 const timeoutKill = (spawned, signal, reject) => {
-	spawned.kill(signal);
+	// spawned.kill(signal);
+	kill(spawned.pid, 'SIGKILL');
 	reject(Object.assign(new Error('Timed out'), {timedOut: true, signal}));
 };
 
@@ -96,7 +99,7 @@ const setExitHandler = async (spawned, {cleanup, detached}, timedPromise) => {
 	}
 
 	const removeExitHandler = onExit(() => {
-		spawned.kill();
+		kill(spawned.pid, 'SIGKILL');
 	});
 
 	return timedPromise.finally(() => {
